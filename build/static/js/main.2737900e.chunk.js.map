{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","details","setDetails","newUrl","setNewUrl","history","useHistory","useEffect","Axios","get","then","response","data","console","log","passUrl","e","a","preventDefault","requestOptions","method","headers","body","JSON","stringify","fetch","push","className","Container","onSubmit","for","class","required","placeholder","type","name","id","onChange","target","value","Table","responsive","map","val","key","href","full","short","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPAqFeA,MAhFf,WACE,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACMC,EAAUC,cAChBC,qBAAU,WACRC,IAAMC,IAAI,oCAAoCC,MAAK,SAACC,GAClDT,EAAWS,EAASC,MACpBC,QAAQC,IAAIH,EAASC,WAEtB,IAEH,IAAMG,EAAO,uCAAG,WAAOC,GAAP,eAAAC,EAAA,6DACdD,EAAEE,iBAIIC,EAAiB,CACrBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CACnBrB,OAAQA,KATE,SAYRsB,MACJ,4CACAN,GACAT,KAHI,sBAGC,sBAAAO,EAAA,sEACCZ,EAAQqB,KAAK,0BADd,4CAfO,2CAAH,sDAmBb,OACE,qBAAKC,UAAU,MAAf,SACE,eAACC,EAAA,EAAD,WACE,8CACA,uBAAMC,SAAUd,EAAhB,UACE,uBAAOe,IAAI,UAAUC,MAAM,UAA3B,iBAGA,uBACEC,UAAQ,EACRC,YAAY,MACZC,KAAK,MACLC,KAAK,UACLC,GAAG,UACHC,SAAU,SAACrB,GAAD,OAAOZ,EAAUY,EAAEsB,OAAOC,UAEtC,wBAAQR,MAAM,kBAAkBG,KAAK,SAArC,uBAKF,eAACM,EAAA,EAAD,CAAOC,WAAW,KAAlB,UACE,gCACE,+BACE,0CACA,gDAGHxC,EAAQyC,KAAI,SAACC,EAAKC,GACjB,OACE,8BACE,gCACE,+BACE,6BACE,mBAAGC,KAAMF,EAAIG,KAAb,SAAoBH,EAAIG,SAE1B,6BACE,mBAAGD,KAAMF,EAAIG,KAAb,SAAoBH,EAAII,gBAPtBH,eCrDTI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxC,MAAK,YAAkD,IAA/CyC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2737900e.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Axios from \"axios\";\nimport { Container, Table } from \"react-bootstrap\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction App() {\n  const [details, setDetails] = useState([]);\n  const [newUrl, setNewUrl] = useState(\"\");\n  const history = useHistory();\n  useEffect(() => {\n    Axios.get(\"https://uri-short.herokuapp.com/\").then((response) => {\n      setDetails(response.data);\n      console.log(response.data);\n    });\n  }, []);\n\n  const passUrl = async (e) => {\n    e.preventDefault();\n    // await Axios.post(\"https://uri-short.herokuapp.com/shortUrls\", {\n    //   newUrl: newUrl,\n    // });\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        newUrl: newUrl,\n      }),\n    };\n    await fetch(\n      \"https://uri-short.herokuapp.com/shortUrls\",\n      requestOptions\n    ).then(async () => {\n      await history.push(\"http://localhost:3000/\");\n    });\n  };\n  return (\n    <div className=\"App\">\n      <Container>\n        <h1>URL Shrinker</h1>\n        <form onSubmit={passUrl}>\n          <label for=\"fullUrl\" class=\"sr-only\">\n            Url\n          </label>\n          <input\n            required\n            placeholder=\"Url\"\n            type=\"url\"\n            name=\"fullUrl\"\n            id=\"fullUrl\"\n            onChange={(e) => setNewUrl(e.target.value)}\n          />\n          <button class=\"btn btn-success\" type=\"submit\">\n            Shrink\n          </button>\n        </form>\n\n        <Table responsive=\"lg\">\n          <thead>\n            <tr>\n              <th>Full URL</th>\n              <th>Short URL</th>\n            </tr>\n          </thead>\n          {details.map((val, key) => {\n            return (\n              <div key={key}>\n                <tbody>\n                  <tr>\n                    <td>\n                      <a href={val.full}>{val.full}</a>\n                    </td>\n                    <td>\n                      <a href={val.full}>{val.short}</a>\n                    </td>\n                  </tr>\n                </tbody>\n              </div>\n            );\n          })}\n        </Table>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}